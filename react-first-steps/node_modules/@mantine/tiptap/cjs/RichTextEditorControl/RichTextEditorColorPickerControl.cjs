'use client';
'use strict';

var React = require('react');
var core = require('@mantine/core');
var hooks = require('@mantine/hooks');
var Icons = require('../icons/Icons.cjs');
var RichTextEditor_context = require('../RichTextEditor.context.cjs');
var RichTextEditorControl = require('./RichTextEditorControl.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const defaultProps = {};
const RichTextEditorColorPickerControl = React.forwardRef((props, ref) => {
  const { popoverProps, colors, colorPickerProps, ...others } = core.useProps(
    "RichTextEditorColorPickerControl",
    defaultProps,
    props
  );
  const { editor, labels, getStyles } = RichTextEditor_context.useRichTextEditorContext();
  const [opened, { toggle, close }] = hooks.useDisclosure(false);
  const [state, setState] = React.useState("palette");
  const currentColor = editor?.getAttributes("textStyle").color || "var(--mantine-color-text)";
  const handleChange = (value, shouldClose = true) => {
    (editor?.chain()).focus().setColor(value).run();
    shouldClose && close();
  };
  const handleClear = () => {
    (editor?.chain()).focus().unsetColor().run();
    close();
  };
  const controls = colors.map((color, index) => /* @__PURE__ */ React__default.default.createElement(
    core.ColorSwatch,
    {
      key: index,
      component: "button",
      color,
      onClick: () => handleChange(color),
      size: 26,
      radius: "xs",
      style: { cursor: "pointer" },
      title: labels.colorPickerColorLabel(color),
      "aria-label": labels.colorPickerColorLabel(color)
    }
  ));
  return /* @__PURE__ */ React__default.default.createElement(core.Popover, { opened, withinPortal: true, trapFocus: true, onClose: close, ...popoverProps }, /* @__PURE__ */ React__default.default.createElement(core.Popover.Target, null, /* @__PURE__ */ React__default.default.createElement(
    RichTextEditorControl.RichTextEditorControl,
    {
      ...others,
      "aria-label": labels.colorPickerControlLabel,
      title: labels.colorPickerControlLabel,
      ref,
      onClick: toggle
    },
    /* @__PURE__ */ React__default.default.createElement(core.ColorSwatch, { color: currentColor, size: 14 })
  )), /* @__PURE__ */ React__default.default.createElement(core.Popover.Dropdown, { ...getStyles("linkEditorDropdown") }, state === "palette" && /* @__PURE__ */ React__default.default.createElement(core.SimpleGrid, { cols: 7, spacing: 2 }, controls), state === "colorPicker" && /* @__PURE__ */ React__default.default.createElement(
    core.ColorPicker,
    {
      defaultValue: currentColor,
      onChange: (value) => handleChange(value, false),
      ...colorPickerProps
    }
  ), /* @__PURE__ */ React__default.default.createElement(core.Tooltip.Group, { closeDelay: 200 }, /* @__PURE__ */ React__default.default.createElement(core.Group, { justify: "flex-end", gap: "xs", mt: "sm" }, state === "palette" && /* @__PURE__ */ React__default.default.createElement(
    core.ActionIcon,
    {
      variant: "default",
      onClick: close,
      title: labels.colorPickerCancel,
      "aria-label": labels.colorPickerCancel
    },
    /* @__PURE__ */ React__default.default.createElement(Icons.IconX, { style: { width: core.rem(16), height: core.rem(16) } })
  ), /* @__PURE__ */ React__default.default.createElement(
    core.ActionIcon,
    {
      variant: "default",
      onClick: handleClear,
      title: labels.colorPickerClear,
      "aria-label": labels.colorPickerClear
    },
    /* @__PURE__ */ React__default.default.createElement(Icons.IconCircleOff, { style: { width: core.rem(16), height: core.rem(16) } })
  ), state === "palette" ? /* @__PURE__ */ React__default.default.createElement(
    core.ActionIcon,
    {
      variant: "default",
      onClick: () => setState("colorPicker"),
      title: labels.colorPickerColorPicker,
      "aria-label": labels.colorPickerColorPicker
    },
    /* @__PURE__ */ React__default.default.createElement(Icons.IconColorPicker, { style: { width: core.rem(16), height: core.rem(16) } })
  ) : /* @__PURE__ */ React__default.default.createElement(
    core.ActionIcon,
    {
      variant: "default",
      onClick: () => setState("palette"),
      "aria-label": labels.colorPickerPalette,
      title: labels.colorPickerPalette
    },
    /* @__PURE__ */ React__default.default.createElement(Icons.IconPalette, { style: { width: core.rem(16), height: core.rem(16) } })
  ), state === "colorPicker" && /* @__PURE__ */ React__default.default.createElement(
    core.ActionIcon,
    {
      variant: "default",
      onClick: close,
      title: labels.colorPickerSave,
      "aria-label": labels.colorPickerSave
    },
    /* @__PURE__ */ React__default.default.createElement(Icons.IconCheck, { style: { width: core.rem(16), height: core.rem(16) } })
  )))));
});
RichTextEditorColorPickerControl.displayName = "@mantine/tiptap/ColorPickerControl";

exports.RichTextEditorColorPickerControl = RichTextEditorColorPickerControl;
//# sourceMappingURL=RichTextEditorColorPickerControl.cjs.map
