import { JSX as JSX_2 } from 'react/jsx-runtime';
import { ReactNode } from 'react';

declare type ColorScheme = string;

declare type OnChangeViewRange = (range: [number, number]) => void;

export declare function Timeline<TTimelineRow extends TimelineRow = TimelineRow, TTimelineEvent extends TimelineEvent = TimelineEvent>({ className, getRows, getEvents, colorScheme, viewTimeZone, defaultViewRange, onChangeViewRange, canChangeCrossEventsStrategy, crossEventsStrategy, sidebarWidth, activeEventPanelWidth, showCurrentTime, showMouseTime, showHoveredEventPopup, highlightHoveredEvent, showTimezoneInfo, showScaleController, showSidebar, headerHeight, dataViewPadding, rowPadding, eventLineHeight, eventLineMargin, eventBorderRadius, eventContentMinWidth, highlightHoveredRow, renderGridLines, eventsLoadStepSize, viewRangeLimit, renderEventContent, renderActiveEvent, renderEventPopupContent, renderSidebarRowContent, }: TimelineProps<TTimelineRow, TTimelineEvent>): JSX_2.Element;

export declare type TimelineCrossEventsStrategy = 'overlay-crossed-events' | 'split-crossed-events';

export declare type TimelineEvent = {
    id: string;
    start: number;
    end: number;
    color: string;
    highlightColor?: string;
};

export declare type TimelineGetEvents<TTimelineEvent extends TimelineEvent = TimelineEvent> = (rowId: string, from: number, to: number) => Promise<TTimelineEvent[]> | TTimelineEvent[];

export declare type TimelineGetRows<TTimelineRow extends TimelineRow = TimelineRow> = (options: TimelinePaginationOptions) => Promise<TimelineRowsPage<TTimelineRow>> | TimelineRowsPage<TTimelineRow>;

export declare type TimelinePaginationOptions = {
    offset: number;
    count: number;
};

export declare type TimelineProps<TTimelineRow extends TimelineRow = TimelineRow, TTimelineEvent extends TimelineEvent = TimelineEvent> = {
    getRows: TimelineGetRows<TTimelineRow>;
    getEvents: TimelineGetEvents<TTimelineEvent>;
    className?: string;
    colorScheme?: ColorScheme | null;
    viewTimeZone?: string | null;
    defaultViewRange?: [number, number] | null;
    onChangeViewRange?: OnChangeViewRange | null;
    canChangeCrossEventsStrategy?: boolean | null;
    crossEventsStrategy?: TimelineCrossEventsStrategy | null;
    showSidebar?: boolean | null;
    sidebarWidth?: number | 'auto' | null;
    renderActiveEvent?: ((event: TTimelineEvent) => ReactNode) | null;
    activeEventPanelWidth?: number | 'auto' | null;
    showCurrentTime?: boolean | null;
    showMouseTime?: boolean | null;
    highlightHoveredEvent?: boolean | null;
    showHoveredEventPopup?: boolean | null;
    renderEventPopupContent?: ((event: TTimelineEvent) => ReactNode) | null;
    showTimezoneInfo?: boolean | null;
    showScaleController?: boolean | null;
    headerHeight?: number | null;
    dataViewPadding?: number | null;
    rowPadding?: number | null;
    eventLineHeight?: number | null;
    eventLineMargin?: number | null;
    eventBorderRadius?: number | null;
    eventContentMinWidth?: number | null;
    highlightHoveredRow?: boolean | null;
    renderGridLines?: boolean | null;
    eventsLoadStepSize?: number | null;
    viewRangeLimit?: ViewRangeLimit | null;
    renderEventContent?: ((event: TTimelineEvent) => ReactNode) | null;
    renderSidebarRowContent?: ((options: TimelineSidebarRowOptions<TTimelineRow>) => ReactNode) | null;
};

export declare type TimelineRow = {
    id: string;
    title: string;
    noEvents?: boolean;
};

declare type TimelineRowGroup<TTimelineRow extends TimelineRow = TimelineRow> = TTimelineRow & {
    children?: TimelineRowGroup<TTimelineRow>[];
    defaultExpanded?: boolean;
};

export declare type TimelineRowsPage<TTimelineRow extends TimelineRow = TimelineRow> = {
    count: number;
    offset: number;
    totalCount: number;
    data: TimelineRowGroup<TTimelineRow>[];
};

export declare type TimelineSettings = {
    canChangeCrossEventsStrategy: boolean;
    crossEventsStrategy: TimelineCrossEventsStrategy;
    showCurrentTime: boolean;
    showMouseTime: boolean;
    showHoveredEventPopup: boolean;
    highlightHoveredEvent: boolean;
    showTimezoneInfo: boolean;
    showScaleController: boolean;
    showSidebar: boolean;
    sidebarWidth: number | 'auto';
    activeEventPanelWidth: number | 'auto';
    headerHeight: number;
    dataViewPadding: number;
    rowPadding: number;
    eventLineHeight: number;
    eventLineMargin: number;
    eventBorderRadius: number;
    eventContentMinWidth: number;
    highlightHoveredRow: boolean;
    renderGridLines: boolean;
    renderEventContent: ((event: TimelineEvent) => ReactNode) | null;
    renderActiveEvent: ((event: TimelineEvent) => ReactNode) | null;
    renderEventPopupContent: ((event: TimelineEvent) => ReactNode) | null;
    renderSidebarRowContent: ((options: TimelineSidebarRowOptions) => ReactNode) | null;
};

export declare type TimelineSidebarRowOptions<TTimelineRow extends TimelineRow = TimelineRow> = {
    row: TTimelineRow;
    crossEventsStrategy: TimelineCrossEventsStrategy;
    settings: TimelineSettings;
    nestedLevel: number;
    hasChildren: boolean;
    expanded: boolean;
    onChangeCrossEventsStrategy?: ((crossEventsStrategy: TimelineCrossEventsStrategy) => void) | null;
};

declare type ViewRangeLimit = [number | null, number | null];

export { }
